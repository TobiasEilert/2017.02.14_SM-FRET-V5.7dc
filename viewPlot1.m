function varargout = viewPlot1(varargin)
% VIEWPLOT1 M-file for viewPlot1.fig
%      VIEWPLOT1, by itself, creates a new VIEWPLOT1 or raises the existing
%      singleton*.
%
%      H = VIEWPLOT1 returns the handle to a new VIEWPLOT1 or the handle to
%      the existing singleton*.
%
%      VIEWPLOT1('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in VIEWPLOT1.M with the given input
%      arguments.
%
%      VIEWPLOT1('Property','Value',...) creates a new VIEWPLOT1 or raises
%      the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before viewPlot1_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to viewPlot1_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help viewPlot1

% Last Modified by GUIDE v2.5 22-Aug-2008 15:48:36

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @viewPlot1_OpeningFcn, ...
                   'gui_OutputFcn',  @viewPlot1_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% --- Executes just before viewPlot1 is made visible.
function viewPlot1_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to viewPlot1 (see VARARGIN)

% Choose default command line output for viewPlot1
handles.output = hObject;

handles.parameters = struct('maxSTDdonor', .15, 'maxSTDFRET', .25, ...
    'maxDonorPeak', .25, 'DonorOutPeak', .08, 'maxDonorOut', .15, ...
    'DonorOutStep', .25, 'maxNegative', -.15, 'smoothwith', 5);

%The data structure contents the data read directly from the saved trace files
handles.data.time = []; 
handles.data.trace_data = []; %ttr
handles.data.trace_red = []; %.atr
handles.data.coordinates = []; %.cor
handles.data.bckgnd = []; %.bck
handles.data.red_bckgnd = []; %.bkr

%The mData structure contents the information of a single molecule
handles.mData.donor = [];
handles.mData.acceptor = [];
handles.mData.red = [];
handles.mData.background_left = [];
handles.mData.background_right = [];
handles.mData.background_right_red = [];

%The control structure contents the information to open files and show
%molecules.
handles.control.molecule = 1; %the number of molecule that is been used
handles.control.totalMolecules=0;
handles.control.file = {};
handles.control.path ='';
handles.control.traces2see = []; %a binary list with the molecules that the user want to see

%The analysis structure store the information generated by manual or
%automatic analysis
handles.analysis.goodMolecules = []; %a binary matrix with the traces chosen by the automatic analysis
handles.analysis.allIndex = {}; %a cell array that have the relevant points found by the findGutPlot function in each cell
handles.analysis.selectedTraces = []; %a binary matrix with the user selected traces
handles.analysis.finalData={}; %a cell array that have the values of 
                               %result,trace,FRET_only_trace return by the
                               %analyseData function in the selected traces
                               %and empty cell in the unselected

%the userData structure stores control parameters given for the user                              
handles.userData.alex = 0;
handles.userData.old_data = 0;
handles.userData.cameraside = 3;
handles.userData.smoothwidth = 10;
handles.userData.filter = 2; %1 is for median filter, 2 is for smoothing average

guidata(hObject, handles);
% UIWAIT makes viewPlot1 wait for user response (see UIRESUME)
% uiwait(handles.figure1);
% Update handles structure

% --- Outputs from this function are returned to the command line.
function varargout = viewPlot1_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;

% --------------------------------------------------------------------
function FileMenu_Callback(hObject, eventdata, handles)
% hObject    handle to FileMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

function Close_Callback(hObject, eventdata, handles)
% hObject    handle to Close (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
selection = questdlg(['Close ' get(handles.figure1,'Name') '?'],...
                     ['Close ' get(handles.figure1,'Name') '...'],...
                     'Yes','No','Yes');
if strcmp(selection,'No')
    return;
end
close all;

%Open menu to recive from the user the values of the structure userData,
%the path and the list of files to analyse. Then loads the files creating
%a callback in LB_files
% --------------------------------------------------------------------
function Open_Callback(hObject, eventdata, handles)
% hObject    handle to Open (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Dialogue box is opened to set all necessary parameters%%%
handles.userData = menu_fret_analysis();
%it should not be possible to select the background option when one is
%analysing old data
if handles.userData.old_data ~= 0
    set(handles.PB_showBck,'Enable','off');
end

[handles.control.file handles.control.path] = getLongFiles('*.ttr');
guidata(viewPlot1, handles);
if isempty(handles.control.path) == 0
    set(handles.LB_files, 'String', handles.control.file, 'Value', 1);
    handles = LB_files_Callback(hObject, eventdata, handles);    
    guidata(viewPlot1, handles);
else
    errordlg(['No *.ttr Files found', ' !'], 'File Error');
end


%LB_files_Callback load a selected file, initialize the molecule number
%according to the value of the good and bad traces Checkbox, and load the
%molecule and initialize the trace.
% --- Executes on selection change in LB_files.
function handles = LB_files_Callback(hObject, eventdata, handles)
% hObject    handle to LB_files (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns LB_files contents as cell array
%        contents{get(hObject,'Value')} returns selected item from LB_files

[handles.data handles.control handles.analysis]= LoadFiles(handles.control, ...
    handles.userData,get(handles.LB_files,'Value'));
guidata(viewPlot1, handles);
dummy = sum(handles.analysis.goodMolecules);
if  dummy == 0 || dummy == handles.control.totalMolecules
    set(handles.CB_good_traces,'Enable','off','Value',0);
    set(handles.CB_bad_traces,'Enable','off','Value',0);
    set(handles.CB_FRETvalues,'Enable','off','Value',0);
else
    set(handles.CB_good_traces,'Enable','on');
    set(handles.CB_bad_traces,'Enable','on');
    if get(handles.CB_good_traces,'Value') || ...
            get(handles.CB_bad_traces,'Value')
        set(handles.CB_FRETvalues,'Enable','off');
    end
end

set(handles.TX_selectedM, 'String', '');
    
if get(handles.CB_good_traces,'Value')
    handles.control.traces2see=handles.analysis.goodMolecules;
elseif get(handles.CB_bad_traces,'Value')
    handles.control.traces2see=~handles.analysis.goodMolecules;
elseif get(handles.CB_FRETvalues,'Value')
    set(handles.ED_minFRET, 'String','20');
    set(handles.ED_maxFRET, 'String','-20');
    handles = PB_selectGood_Callback(hObject, eventdata, handles);
else
    handles.control.traces2see = ones(handles.control.totalMolecules,1);
end
guidata(viewPlot1, handles);

dummy = find(handles.control.traces2see);
handles.control.molecule = dummy(1);

set(handles.ED_molecule,'String', num2str(handles.control.molecule));
handles.mData = InimData(handles.data,handles.userData, handles.control.molecule);
guidata(viewPlot1, handles);
IniTraces(handles);

% --------------------------------------------------------------------

%Check if the value in the ED_molecule is valid, initialize the molecule
%and show the trace
function ED_molecule_Callback(hObject, eventdata, handles)
% hObject    handle to ED_molecule (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of ED_molecule as text
%        str2double(get(hObject,'String')) returns contents of ED_molecule as a double

molecule = str2double(get(hObject,'String'));
if isnumeric(molecule) && mod(molecule,1) == 0
    if molecule > handles.control.totalMolecules
        molecule = handles.control.totalMolecules;
        set(hObject,'String', handles.control.totalMolecules);
    elseif molecule < 1
        molecule = 1;
        set(hObject,'String', '1');
    end
    handles.control.molecule = molecule;
    handles.mData = InimData(handles.data,handles.userData, molecule);
    guidata(viewPlot1, handles);
    IniTraces(handles);
else
    set(hObject,'String', handles.control.molecule);
end
   
% --- Executes during object creation, after setting all properties.
function ED_molecule_CreateFcn(hObject, eventdata, handles)
% hObject    handle to ED_molecule (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%Finds the next molecule indicated in control.traces2see and initialize it
% --- Executes on button press in PB_next.
function handles = PB_next_Callback(hObject, eventdata, handles)
% hObject    handle to PB_next (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.control.molecule = handles.control.molecule +1;
while(handles.control.molecule <= handles.control.totalMolecules && ...
        ~handles.control.traces2see(handles.control.molecule))
    handles.control.molecule = handles.control.molecule +1;
end
if handles.control.molecule > handles.control.totalMolecules
    handles = PB_prev_Callback(hObject, eventdata, handles);
end

set(handles.ED_molecule,'String', num2str(handles.control.molecule));
handles.mData = InimData(handles.data,handles.userData, handles.control.molecule);
guidata(viewPlot1, handles);
IniTraces(handles);
        
%Finds the previous molecule indicated in control.traces2see and initialize it
% --- Executes on button press in PB_prev.
function handles =PB_prev_Callback(hObject, eventdata, handles)
% hObject    handle to PB_prev (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.control.molecule = handles.control.molecule -1;
while(handles.control.molecule >= 1 && ...
        ~handles.control.traces2see(handles.control.molecule))
    handles.control.molecule = handles.control.molecule -1;
end
if handles.control.molecule < 1
    handles = PB_next_Callback(hObject, eventdata, handles);
end

set(handles.ED_molecule,'String', num2str(handles.control.molecule));
handles.mData = InimData(handles.data,handles.userData, handles.control.molecule);
guidata(viewPlot1, handles);
IniTraces(handles);

%Activates the autoanalysis property and enable the use of other buttons
% --- Executes on button press in CB_autoanalysis.
function CB_autoanalysis_Callback(hObject, eventdata, handles)
% hObject    handle to CB_autoanalysis (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of CB_autoanalysis
if get(hObject, 'Value')
    set(handles.PB_selectGood,'Enable','on');
    set(handles.PB_analyse_manually,'Enable','on');    
else
    set(handles.PB_selectGood,'Enable','off');
    set(handles.PB_analyse_manually,'Enable','off');
end
handles.mData = InimData(handles.data,handles.userData, handles.control.molecule);
guidata(viewPlot1, handles);
IniTraces(handles);

%Force a manual selection of the relevant points in autoanalysis mode, 
%selects the trace and save the result of the analysis in the 
%analysis.finalData cell array
% --- Executes on button press in PB_analyse_manually.
function PB_analyse_manually_Callback(hObject, eventdata, handles)
% hObject    handle to PB_analyse_manually (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
regions = getPoints(handles.data.time, handles.userData, handles.AX_main_display);
[result trace FRET_only_trace] = analyseData(handles.mData, handles.data.time, handles.userData ,regions); 
plotAnalysis(trace,regions,handles.data.time,handles.userData, handles.AX_main_display);
moleculeTitle(handles.control.molecule,handles.data.coordinates, ...
    handles.userData.cameraside);
user_response = modaldlg('Title', '','String','Do you still want to select this trace?');
switch user_response
    case 'Yes'
        handles.analysis.selectedTraces(handles.control.molecule) = 1;
        handles = seeFRETvalues(hObject, eventdata, handles);
        set(handles.TB_selected,'String', 'Selected', ...
            'BackgroundColor', 'green', 'Value', 1);
        handles.analysis.finalData{handles.control.molecule}={result,trace,FRET_only_trace};
        handles = PB_next_Callback(hObject, eventdata, handles);
    case 'No'
        handles = PB_next_Callback(hObject, eventdata, handles);
end
guidata(viewPlot1, handles);

% --------------------------------------------------------------------
function Analysis_Callback(hObject, eventdata, handles)
% hObject    handle to Analysis (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%Generates a report using several files and plot the FRETonly_trace data as
%an histogram 
% --------------------------------------------------------------------
function autoHist_Callback(hObject, eventdata, handles)
% hObject    handle to autoHist (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

[trace_report trace_sheet FRET_only_trace_sheet] = checkall();
if ~isempty(FRET_only_trace_sheet)
    x= -0.25:.05:1.25;
    fig = figure();
    clf(fig);
    [n,xout] =hist(FRET_only_trace_sheet(:,end),x);
    bar(xout,n);
    xlim([-0.35 1.4]);
    text(.025,.95*max(n),strcat('Total # of Frames = ', ...
        num2str(size(FRET_only_trace_sheet,1))), 'EdgeColor', 'k', ...
        'VerticalAlignment', 'top');
    text(.025,.85*max(n), strcat('Total # of Molecules = ', ...
        num2str(size(trace_report,1))), 'EdgeColor', 'k', ...
        'VerticalAlignment', 'top');
end

% --- Executes during object creation, after setting all properties.
function LB_files_CreateFcn(hObject, eventdata, handles)
% hObject    handle to LB_files (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

%selects the goodTraces array for trace2see if it is check if it is not and
%the CB_bad is unchecked too, trace2see is equal to an ones array
function CB_good_traces_Callback(hObject, eventdata, handles)
% hObject    handle to CB_good_traces (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of CB_good_traces
if get(hObject,'Value')
    if ~isempty(handles.data.trace_data)
        handles.control.traces2see=handles.analysis.goodMolecules;
        guidata(viewPlot1,handles);
        if ~handles.control.traces2see(handles.control.molecule)
            handles = PB_next_Callback(hObject, eventdata, handles);
            guidata(viewPlot1,handles);
        end
    end
    if get(handles.CB_bad_traces,'Value')
        set(handles.CB_bad_traces, 'Value', 0)
    end
    guidata(viewPlot1, handles);
else
    if ~get(handles.CB_bad_traces,'Value')
        handles.control.traces2see = ones(handles.control.totalMolecules,1);
        guidata(viewPlot1, handles);
    end
end
set(handles.TX_traces2see, 'String', ...
    strcat(num2str(sum(handles.control.traces2see)),' traces to see'));

%selects the not operation in the goodTraces array for trace2see if it is 
%check if it is not and the CB_good is unchecked too, trace2see is equal to 
%an ones array
% --- Executes on button press in CB_bad_traces.
function CB_bad_traces_Callback(hObject, eventdata, handles)
% hObject    handle to CB_bad_traces (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of CB_bad_traces
% --- Executes on button press in CB_good_traces.
if get(hObject,'Value') 
    if ~isempty(handles.data.trace_data)
        handles.control.traces2see=~handles.analysis.goodMolecules;
        guidata(viewPlot1,handles);
        if ~handles.control.traces2see(handles.control.molecule)
            handles = PB_next_Callback(hObject, eventdata, handles);
            guidata(viewPlot1,handles);
        end
    end
    if get(handles.CB_good_traces,'Value')
        set(handles.CB_good_traces, 'Value', 0)
    end
    guidata(viewPlot1, handles);
else
    if ~get(handles.CB_good_traces,'Value')
        handles.control.traces2see = ones(handles.control.totalMolecules,1);
        guidata(viewPlot1, handles);
    end
end

set(handles.TX_traces2see, 'String', ...
    strcat(num2str(sum(handles.control.traces2see)),' traces to see'));


%Execute the script to do the batch analysis when the option it's selected
%in the menu
% --------------------------------------------------------------------
function batch_analysis_Callback(hObject, eventdata, handles)
% hObject    handle to batch_analysis (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
batch_analysis


%Plot data with background when the PB_showBck is pressed
% --- Executes on button press in PB_showBck.
function PB_showBck_Callback(hObject, eventdata, handles)
% hObject    handle to PB_showBck (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%set(handles.AX_main_display,'Color', 'none');
%set(handles.AX_main_display,'color','none')
plotBckGnd(handles.mData, handles.data.time, handles.AX_main_display, ...
    handles.userData.cameraside);
moleculeTitle(handles.control.molecule,handles.data.coordinates,...
    handles.userData.cameraside);
   

%Realize the procedure to select a trace. If the autoanalysis box is
%checked and the trace is GUT, the regions are defined by the points given
%in corresponding cell in allIndex otherwise are given by the user by the
%getPoints function. Then, the data is analysed by the analyeData function
%and the proper changes in the gui are done.
% --- Executes on button press in TB_selected.
function TB_selected_Callback(hObject, eventdata, handles)
% hObject    handle to TB_selected (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of TB_selected
if get(hObject,'Value')
    if get(handles.CB_autoanalysis, 'Value')
        if handles.analysis.goodMolecules(handles.control.molecule)
            FRETIndex = handles.analysis.allIndex{handles.control.molecule};
            regions{1} = 1:FRETIndex(1)-1; %pre_FRET_region
            regions{2} = FRETIndex(1):FRETIndex(2); %FRET_region
            regions{3} = FRETIndex(2)+1:FRETIndex(3)-1; %post_FRET_region
            regions{4} = FRETIndex(3):FRETIndex(4); %donor_only_region
            regions{5} = FRETIndex(4)+1:length(handles.data.time); %post_donor_only_region
        else
            regions = getPoints(handles.data.time, handles.userData, ...
                handles.AX_main_display); %user input
        end
    else
        regions = getPoints(handles.data.time, handles.userData, ...
            handles.AX_main_display); %user input
    end

    [result trace FRET_only_trace] = analyseData(handles.mData, ...
        handles.data.time, handles.userData ,regions); 
    
    plotAnalysis(trace,regions,handles.data.time,handles.userData,handles.AX_main_display);
    moleculeTitle(handles.control.molecule,handles.data.coordinates, ...
        handles.userData.cameraside);
    user_response = modaldlg('Title', '','String','Do you still want to select this trace?');
    switch user_response
        case 'Yes' 
            handles.analysis.selectedTraces(handles.control.molecule) = 1;
            set(handles.TB_selected,'String', 'Selected', ...
                'BackgroundColor', 'green', 'Value', 1);
            handles.analysis.finalData{handles.control.molecule}={result,trace,FRET_only_trace};
        case 'No'
            set(handles.TB_selected, 'String','NO selected', ...
                'BackgroundColor', [204 204 204]/255, 'Value', 0);
            handles.analysis.selectedTraces(handles.control.molecule) = 0;
            
    end
    handles = seeFRETvalues(hObject, eventdata, handles);
    handles = PB_next_Callback(hObject, eventdata, handles);
else
    handles.analysis.selectedTraces(handles.control.molecule) = 0;
    set(hObject,'String', 'NO selected', 'BackgroundColor', [204 204 204]/255);
    handles.analysis.finalData{handles.control.molecule}=[];
    handles = seeFRETvalues(hObject, eventdata, handles);
end
set(handles.TX_selectedM, 'String', ...
    strcat(num2str(sum(handles.analysis.selectedTraces)),' selected'))
guidata(viewPlot1,handles);

% --------------------------------------------------------------------
%Save the data in finalData as _res.txt, _trace.txt and _FRETonly_trace.txt
%ask the user for the save name, and plot the data as point plot and
%histogram of the FRET and gamma values
function saveTraces_Callback(hObject, eventdata, handles)
% hObject    handle to saveTraces (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%%%need finalData, path
%remove the empty cells in final Data and convert the structures result and
%trace in cells.
trace_report = [];
trace_sheet = [];
FRET_only_trace_sheet = [];
for i=1:numel(handles.analysis.finalData)
    if ~isempty(handles.analysis.finalData{i})
        result = struct2cell(handles.analysis.finalData{i}{1});
        result = cell2mat(result);
        traceCell = struct2cell(handles.analysis.finalData{i}{2});
        trace = []; %cell2mat doesn't work, it's necesary a manual conversion
        for j = 1:numel(traceCell)
            dummy = traceCell{j};
            trace = [trace,dummy];
        end
        FRET_only_trace = cell2mat(handles.analysis.finalData{i}{3});
        %append result to list, now also adding the video number
        trace_report = [trace_report;i result']; %append the molecule number     
        trace_sheet = [trace_sheet; i*ones(size(trace,1),1) trace];
        FRET_only_trace_sheet = [FRET_only_trace_sheet; i*ones(size(FRET_only_trace,1),1) FRET_only_trace];
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%Save Data normally%%%%%%%%%%%%%%%%%%%
%get the pre defined save name
filename = [handles.control.path, handles.control.file{get(handles.LB_files,'Value')}];
save_name = filename(1:findstr(filename,'.')-1);
save_name_report = strcat(save_name,'_res.txt');

[path file] = uiputfile('*.txt','Save as', save_name_report);

if path ~= 0
    save_name = [file path];
    save_name = save_name(1:findstr(save_name,'_res.txt')-1);
    save_name_report = strcat(save_name,'_res.txt');
    save_name_trace = strcat(save_name,'_trace.txt');
    save_name_FRET_only_trace = strcat(save_name, '_FRETonly_trace.txt');

    save(save_name_report,'trace_report','-ASCII');
    save(save_name_trace,'trace_sheet','-ASCII');
    save(save_name_FRET_only_trace, 'FRET_only_trace_sheet','-ASCII');
end

%%%%%%%%%%%%%%%%%%%% PLOT HISTOGRAM DATA %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[FRET,x_FRET] = hist(trace_report(:,3));
[gamma,x_gamma] = hist(trace_report(:,5));
fig = figure(5);
clf(fig);
subplot(2,2,1);
text = strcat('FRET results of ',filename);
clear title;
title(text);
bar(x_FRET,FRET);
ylabel('Number of events ');
xlabel('E');
subplot(2,2,2);
bar(x_gamma,gamma);
ylabel('Number of events ');
xlabel('Gamma');
subplot(2,2,3);
plot(trace_report(:,1),trace_report(:,3),'*');
ylabel('E');
xlabel('Molecule number');
subplot(2,2,4);
plot(trace_report(:,1),trace_report(:,5),'*');
ylabel('Gamma');
xlabel('Molecule number');


% --- Executes on button press in PB_selectGood. Select and analyse the
% function marked by the analysis.goodMolecules binary list, using the
% important points store the in allIndex cell and the analyseData function
function handles = PB_selectGood_Callback(hObject, eventdata, handles)
% hObject    handle to PB_selectGood (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%use finalData, time, allIndex, goodTraces
%This function Select and analyse the traces marked with 1 in goodTraces

for i=1:handles.control.totalMolecules
    if handles.analysis.goodMolecules(i)
        FRETIndex = handles.analysis.allIndex{i};
        regions{1} = 1:FRETIndex(1)-1; %pre_FRET_region
        regions{2} = FRETIndex(1):FRETIndex(2); %FRET_region
        regions{3} = FRETIndex(2)+1:FRETIndex(3)-1; %post_FRET_region
        regions{4} = FRETIndex(3):FRETIndex(4); %donor_only_region
        regions{5} = FRETIndex(4)+1:length(handles.data.time); %post_donor_only_region
        
        handles.mData = InimData(handles.data,handles.userData, i);
        [result trace FRET_only_trace] = analyseData(handles.mData, handles.data.time, handles.userData ,regions); 
        handles.analysis.selectedTraces(i) = 1;
        handles.analysis.finalData{i}={result,trace,FRET_only_trace};
    end
end

handles = seeFRETvalues(hObject, eventdata, handles); %activates the seeFRETvalues checkbox
guidata(viewPlot1,handles);

if handles.analysis.selectedTraces(handles.control.molecule)
    set(handles.TB_selected,'String', 'Selected', ...
        'BackgroundColor', 'green', 'Value', 1);
end
set(handles.TX_selectedM, 'String', ...
    strcat(num2str(sum(handles.analysis.selectedTraces)),' selected'));

%Display the data of a new molecule. Changing the selected bottom, the
%principal axis and the title according to the selected molecule.
function IniTraces(handles)
if handles.analysis.selectedTraces(handles.control.molecule)
    set(handles.TB_selected,'String', 'Selected', ...
        'BackgroundColor', 'green', 'Value', 1);
else
    set(handles.TB_selected, 'String','NO selected', ...
        'BackgroundColor', [204 204 204]/255, 'Value', 0);
end

E =-1;
if handles.analysis.selectedTraces(handles.control.molecule)
    dummy = handles.analysis.finalData{handles.control.molecule};
    result  =dummy{1};
    E = result.E;
end

plotTrace(handles.mData, handles.data.time, handles.CB_autoanalysis, ...
    handles.AX_main_display,handles.userData,handles.parameters,E);
moleculeTitle(handles.control.molecule,handles.data.coordinates,...
    handles.userData.cameraside);

% --------------------------------------------------------------------
%Plots a histogram of the FRET column in previous saved
%_FRETonly_trace.txt and _res.txt files.
function viewHist_Callback(hObject, eventdata, handles)
% hObject    handle to viewHist (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

[file path] = uigetfile('*_res.txt;*_FRETonly_trace.txt', ...
    'Loading data to see','MultiSelect','on');
if ~iscell(file)
    a= file;
    file = cell(1,1);
    file{1,1} = a;
end

x= -0.25:.05:1.25;
for i=1:numel(file)
    data = load(strcat(path, file{i}));
    fig = figure();
    clf(fig);
    if findstr(file{i},'_FRETonly_trace.txt')
        [n,xout] =hist(data(:,end),x);
        bar(xout,n);
    elseif findstr(file{i},'_res.txt')
        [n,xout] =hist(data(:,end-18),x);
        bar(xout,n);
    end
    title(file{i},'Interpreter','none');
    xlim([-.35 1.4]);
    text(.025,.95*max(n),strcat('Total of Points = ', num2str(size(data,1))) ...
    , 'EdgeColor', 'k', 'VerticalAlignment', 'top');
end

% --- Executes on button press in CB_FRETvalues.
function handles = CB_FRETvalues_Callback(hObject, eventdata, handles)
% hObject    handle to CB_FRETvalues (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of CB_FRETvalues
if get(handles.CB_FRETvalues,'Value') 
    set(handles.ED_minFRET, 'enable', 'on');
    set(handles.ED_maxFRET, 'enable', 'on');
    set(handles.CB_good_traces,'Enable','off','Value',0);
    set(handles.CB_bad_traces,'Enable','off','Value',0);
    minFRET = str2num(get(handles.ED_minFRET,'String'));
    maxFRET = str2num(get(handles.ED_maxFRET,'String'));
    [traces2see, minFRET, maxFRET] = selectFRETtraces(handles.analysis.selectedTraces, ...
        handles.analysis.finalData, minFRET,maxFRET);
    if sum(traces2see) == 0
        set(handles.ED_minFRET, 'String', num2str(minFRET));
        set(handles.ED_maxFRET, 'String', num2str(maxFRET));
        traces2see = selectFRETtraces(handles.analysis.selectedTraces, ...
            handles.analysis.finalData, minFRET,maxFRET);
    end
    handles.control.traces2see = traces2see;
    guidata(viewPlot1, handles);
    if ~traces2see(handles.control.molecule)
        handles = PB_next_Callback(hObject, eventdata, handles);
        guidata(viewPlot1, handles);
    end
else
    if ~get(handles.CB_good_traces,'Value') && ...
            ~get(handles.CB_bad_traces,'Value')
        traces2see = ones(size(handles.analysis.selectedTraces));
        handles.control.traces2see = traces2see;
        guidata(viewPlot1, handles);
    end
    set(handles.ED_minFRET, 'enable', 'off');
    set(handles.ED_maxFRET, 'enable', 'off');
    set(handles.CB_good_traces,'Enable','on');
    set(handles.CB_bad_traces,'Enable','on');
end
set(handles.TX_traces2see, 'String', ...
    strcat(num2str(sum(handles.control.traces2see)),' traces to see'));


function ED_minFRET_Callback(hObject, eventdata, handles)
% hObject    handle to ED_minFRET (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of ED_minFRET as text
%        str2double(get(hObject,'String')) returns contents of ED_minFRET as a double
minFRET = str2num(get(handles.ED_minFRET,'String'));
if isempty(minFRET)
    minFRET = 0;
    set(hObject,'String',num2str(minFRET));
end
handles = CB_FRETvalues_Callback(hObject, eventdata, handles);
guidata(viewPlot1, handles);


% --- Executes during object creation, after setting all properties.
function ED_minFRET_CreateFcn(hObject, eventdata, handles)
% hObject    handle to ED_minFRET (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function ED_maxFRET_Callback(hObject, eventdata, handles)
% hObject    handle to ED_maxFRET (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of ED_maxFRET as text
%        str2double(get(hObject,'String')) returns contents of ED_maxFRET as a double
maxFRET = str2num(get(handles.ED_maxFRET,'String'));
if isempty(maxFRET)
    maxFRET = 1;
    set(hObject,'String',num2str(maxFRET));
end
handles = CB_FRETvalues_Callback(hObject, eventdata, handles);
guidata(viewPlot1, handles);

% --- Executes during object creation, after setting all properties.
function ED_maxFRET_CreateFcn(hObject, eventdata, handles)
% hObject    handle to ED_maxFRET (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function handles = seeFRETvalues(hObject, eventdata, handles)
if sum(handles.analysis.selectedTraces)~=0
    set(handles.CB_FRETvalues, 'enable', 'on');
else
    set(handles.CB_FRETvalues,'enable','off','Value',0);
end
handles = CB_FRETvalues_Callback(hObject, eventdata, handles);      


